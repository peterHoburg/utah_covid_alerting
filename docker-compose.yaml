version: "3.8"
services:
  api:
    env_file:
      - local.env
    build:
      context: .
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: "api"
        DEGUB: "true"
        DEV: "true"
    command: [ "uvicorn", "api.main:app", "--reload", "--host 0.0.0.0", "--reload" ]
    ports:
      - "8000:8000"
    volumes:
      - .:/opt
      - /opt/data/postgres
    environment:
      POSTGRES_DATABASE_URL_ENV: "postgresql://${PGUSER}:${PGPASSWORD}@${PGHOST}:${PGPORT}/${PGDATABASE}"
    depends_on:
      - postgres
    networks:
      - local_network

  data_loader:
    env_file:
      - local.env
    build:
      context: .
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: "data_loader"
        DEGUB: "true"
        DEV: "true"
    command: [ "python", "data_loader/main.py" ]
    volumes:
      - .:/opt
      - /opt/data/postgres
    environment:
      POSTGRES_DATABASE_URL_ENV: "postgresql://${PGUSER}:${PGPASSWORD}@${PGHOST}:${PGPORT}/${PGDATABASE}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION}"
      S3_ENDPOINT_URL: "${S3_ENDPOINT_URL}"
    depends_on:
      - s3
      - postgres
    networks:
      - local_network

  test:
    env_file:
      - local.env
    build:
      context: .
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: "data_loader"
        DEGUB: "true"
        DEV: "true"
    command: [ "pytest", "-rP" ]
    volumes:
      - .:/opt
      - /opt/data/postgres
    environment:
      POSTGRES_DATABASE_URL_ENV: "postgresql://${PGUSER}:${PGPASSWORD}@${PGHOST}:${PGPORT}/${PGDATABASE}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION}"
      S3_ENDPOINT_URL: "${S3_ENDPOINT_URL}"
    depends_on:
      - s3
      - postgres
    networks:
      - local_network



  postgres:
    env_file:
      - local.env
    image: postgres:13-alpine
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    ports:
      - "${PGPORT}:${PGPORT}"
    environment:
      PGPORT: "${PGPORT}"
      POSTGRES_DB: "${PGDATABASE}"
      POSTGRES_USER: "${PGUSER}"
      POSTGRES_PASSWORD: "${PGPASSWORD}"
    networks:
      - local_network

  s3:
    env_file:
      - local.env
    image: minio/minio
    ports:
      - "9000:9000"
    volumes:
      - ./data/s3:/data
    environment:
      MINIO_ACCESS_KEY: "${AWS_ACCESS_KEY_ID}"
      MINIO_SECRET_KEY: "${AWS_SECRET_ACCESS_KEY}"
    command: [ "server", "/data" ]
    networks:
      - local_network

networks:
  local_network:
    driver: bridge
